package com.tranzzo.android.sdk;

import android.annotation.SuppressLint;
import android.content.Context;
import androidx.annotation.NonNull;
import androidx.annotation.VisibleForTesting;
import com.tranzzo.android.sdk.annotation.BetaApi;
import com.tranzzo.android.sdk.annotation.InternalApi;
import com.tranzzo.android.sdk.view.Card;
import org.json.JSONObject;

import java.util.*;

/**
 * Entry point for Tranzzo SDK API.
 */
@SuppressLint("SimpleDateFormat")
public class Tranzzo {
    
    @VisibleForTesting
    static final String OOPS_MESSAGE_INTERNAL = "An error occurred within Tranzzo SDK. Send us exception log and we will try to do out best!";
    static final String OOPS_MESSAGE_SERVER = "An error occurred within Tranzzo SDK. Send us this message and we will try to do out best: ";
    
    private final String apiToken;
    private final TranzzoApi api;
    private final TelemetryProvider telemetry;
    private final Log log;
    
    /**
     * Factory method for {@link Tranzzo}.
     * TODO: Add link to CDN docs, section: Android
     *
     * @param apiToken API Token generated by Tranzzo.
     */
    public static Tranzzo init(String apiToken) {
        return new Tranzzo(apiToken, new HttpTranzzoApi(BuildConfig.TRANZZO_ENDPOINT), AndroidTelemetryProvider.INSTANCE, AndroidLogAdapter.INSTANCE);
    }
    
    /**
     * Private unstable constructor.
     *
     * @see #init(String)
     */
    @InternalApi
    @VisibleForTesting
    Tranzzo(String apiToken, TranzzoApi api, TelemetryProvider telemetry, Log log) {
        this.apiToken = apiToken;
        this.api = api;
        this.telemetry = telemetry;
        this.log = log;
    }
    
    /**
     * Performs PCI DSS compliant card tokenization on Tranzzo server.
     * Immediately returns an error for invalid card.
     *
     * @param card    card to tokenize
     * @param context application context
     * @return either successful {@link CardToken} result or {@link TrzError} inside {@link Either}
     * @see Card#isValid()
     * @see Either#isSuccessful()
     */
    @BetaApi
    public Either<TrzError, CardToken> tokenize(@NonNull final Card card, @NonNull final Context context) {
        if (!card.isValid()) {
            return Either.failure(TrzError.mkInternal("Attempt to tokenize invalid card."));
        } else {
            return doTokenize(card, context);
        }
        
    }
    
    private Either<TrzError, CardToken> doTokenize(@NonNull final Card card, @NonNull final Context context) {
        try {
            SortedMap<String, Object> data = new TreeMap<>(card.toMap());
            data.putAll(telemetry.collect(context));
            
            log.debug("Request: " + data);
            
            TrzResponse response = api.tokenize(data, apiToken);
            
            if (response.success) {
                log.debug("Response [success]: " + response);
                return Either.success(CardToken.fromJson(response.body));
            } else {
                log.error("Response [failure]: " + response.body);
                return Either.failure(TrzError.fromJson(new JSONObject(response.body)));
            }
            
        } catch (Exception ex) {
            String internalErrorId = UUID.randomUUID().toString();
            log.error(OOPS_MESSAGE_INTERNAL + " Error id: " + internalErrorId, ex);
            return Either.failure(new TrzError(internalErrorId, OOPS_MESSAGE_INTERNAL));
        }
    }
    
    
}
