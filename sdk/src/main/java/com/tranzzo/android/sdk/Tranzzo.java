package com.tranzzo.android.sdk;

import android.content.Context;

import androidx.annotation.NonNull;
import androidx.annotation.VisibleForTesting;

import com.tranzzo.android.sdk.annotation.BetaApi;
import com.tranzzo.android.sdk.annotation.InternalApi;
import com.tranzzo.android.sdk.util.Either;
import com.tranzzo.android.sdk.view.Card;

import java.util.SortedMap;
import java.util.TreeMap;

/**
 * Entry point for Tranzzo SDK API.
 *
 * @see #tokenizeEncrypted(Card, Context)
 * @see #tokenize(Card, Context)
 */
public class Tranzzo {
    
    private static final String OOPS_MESSAGE_INTERNAL = "An error occurred within Tranzzo SDK. Send us exception log and we will try to do our best!";
    
    static String oopsMessage(String... args){
        StringBuilder result = new StringBuilder("An error occurred within Tranzzo SDK. Send us this message and we will try to do our best:");
        for (String arg : args) {
            result.append(' ').append(arg);
        }
        return result.toString();
    }
    
    private final String apiToken;
    private final TranzzoApi api;
    private final TelemetryProvider telemetry;
    private final Log log;
    
    /**
     * Factory method for {@link Tranzzo}.
     * TODO: Add link to CDN docs, section: Android
     *
     * @param apiToken API Token generated by Tranzzo.
     */
    @NonNull
    public static Tranzzo init(String apiToken) {
        return init(apiToken, BuildConfig.TRANZZO_ENDPOINT);
    }
    
    @VisibleForTesting
    static Tranzzo init(String apiToken, String endpoint) {
        return new Tranzzo(
                apiToken,
                new HttpTranzzoApi(endpoint),
                AndroidTelemetryProvider.INSTANCE,
                AndroidLogAdapter.INSTANCE
        );
    }
    
    /**
     * Private unstable constructor.
     *
     * @see #init(String)
     */
    @InternalApi
    @VisibleForTesting
    Tranzzo(String apiToken, TranzzoApi api, TelemetryProvider telemetry, Log log) {
        this.apiToken = apiToken;
        this.api = api;
        this.telemetry = telemetry;
        this.log = log;
    }
    
    /**
     * Performs PCI DSS compliant card tokenization on Tranzzo server.
     * Immediately returns an error for invalid card.
     *
     * @param card    card to tokenize
     * @param context application context
     * @return either successful {@link CardToken} result or {@link TrzError} inside {@link Either}
     * @see Card#isValid()
     * @see Either#isSuccessful()
     */
    @BetaApi
    @NonNull
    public Either<TrzError, CardToken> tokenize(@NonNull final Card card, @NonNull final Context context) {
        if (card.isValid()){
            return doTokenize(prepareData(card, context, false))
                    .flatMap(CardToken::fromJson);
        } else {
            return invalidCard();
        }
    }
    
    /**
     * Performs PCI DSS compliant card tokenization on Tranzzo server with issue enrichment.
     * Immediately returns an error for invalid card.
     *
     * @param card    card to tokenize
     * @param context application context
     * @return either successful {@link CardToken} result or {@link TrzError} inside {@link Either}
     * @see Card#isValid()
     * @see Either#isSuccessful()
     */
    @BetaApi
    @NonNull
    public Either<TrzError, EncryptedToken> tokenizeEncrypted(@NonNull final Card card, @NonNull final Context context) {
        if (card.isValid()){
            return doTokenize(prepareData(card, context, true))
                    .flatMap(EncryptedToken::fromJson);
        } else {
            return invalidCard();
        }
    }
    
    private SortedMap<String, Object> prepareData(@NonNull final Card card, @NonNull final Context context, boolean rich) {
        return new TreeMap<String, Object>(card.toMap()){{
            putAll(telemetry.collect(context));
            put("rich", rich);
        }};
    }
    
    @NonNull
    private Either<TrzError, String> doTokenize(@NonNull final SortedMap<String, Object> data) {
        return api
                .tokenize(data, apiToken)
                .peek(body -> log.trace("Response [success]: " + body))
                .peekLeft(e -> log.trace("Response [failure]: " + e))
                .peekLeft(e -> {
                    log.error(OOPS_MESSAGE_INTERNAL);
                    log.error(e.toString());
                });
        
    }
    
    private <T> Either<TrzError, T> invalidCard() {
        return Either.failure(TrzError.mkInternal("Attempt to tokenize invalid card."));
    }
    
}
